
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 22 16:26:46 CST 2020
//----------------------------------------------------

package analizador_sintactico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 22 16:26:46 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\050\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\044\005\000\002\042\004\000\002\042\007\000" +
    "\002\042\011\000\002\006\003\000\002\006\005\000\002" +
    "\006\007\000\002\045\004\000\002\045\002\000\002\003" +
    "\012\000\002\007\004\000\002\007\002\000\002\004\005" +
    "\000\002\004\003\000\002\004\002\000\002\005\005\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\011\004\000\002\011" +
    "\014\000\002\011\007\000\002\011\012\000\002\015\004" +
    "\000\002\015\002\000\002\046\012\000\002\046\005\000" +
    "\002\046\002\000\002\013\010\000\002\013\007\000\002" +
    "\013\006\000\002\012\003\000\002\012\005\000\002\012" +
    "\004\000\002\012\003\000\002\012\004\000\002\012\005" +
    "\000\002\012\006\000\002\047\004\000\002\047\005\000" +
    "\002\047\005\000\002\014\003\000\002\014\005\000\002" +
    "\014\007\000\002\014\011\000\002\032\003\000\002\032" +
    "\002\000\002\033\005\000\002\033\003\000\002\036\005" +
    "\000\002\036\002\000\002\037\003\000\002\037\005\000" +
    "\002\031\005\000\002\035\004\000\002\034\005\000\002" +
    "\034\002\000\002\040\003\000\002\020\004\000\002\021" +
    "\005\000\002\021\002\000\002\023\004\000\002\024\005" +
    "\000\002\024\002\000\002\026\004\000\002\026\003\000" +
    "\002\041\005\000\002\041\003\000\002\016\003\000\002" +
    "\017\005\000\002\017\003\000\002\022\005\000\002\022" +
    "\003\000\002\025\005\000\002\025\003\000\002\027\003" +
    "\000\002\027\005\000\002\027\004\000\002\030\004\000" +
    "\002\030\003\000\002\030\005\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\004\000\002\043\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\012\002\ufffc\004\011\006\012\046\005\001" +
    "\002\000\004\002\315\001\002\000\004\042\277\001\002" +
    "\000\012\002\ufffc\004\011\006\012\046\005\001\002\000" +
    "\012\002\ufffc\004\011\006\012\046\005\001\002\000\004" +
    "\002\000\001\002\000\012\002\ufffc\004\011\006\012\046" +
    "\005\001\002\000\004\046\013\001\002\000\004\012\014" +
    "\001\002\000\006\013\uffed\046\015\001\002\000\004\042" +
    "\272\001\002\000\006\011\270\013\uffee\001\002\000\004" +
    "\013\020\001\002\000\006\036\ufff0\042\021\001\002\000" +
    "\006\014\266\022\161\001\002\000\004\036\023\001\002" +
    "\000\026\004\037\016\036\027\032\030\026\031\034\033" +
    "\031\035\030\040\033\043\040\046\035\001\002\000\012" +
    "\002\ufff2\004\ufff2\006\ufff2\046\ufff2\001\002\000\006\004" +
    "\263\037\264\001\002\000\022\005\052\012\053\014\064" +
    "\023\043\026\045\044\056\045\063\046\050\001\002\000" +
    "\030\004\037\016\036\027\032\030\026\031\034\033\031" +
    "\035\030\037\261\040\033\043\040\046\035\001\002\000" +
    "\006\004\uffd7\037\uffd7\001\002\000\004\046\247\001\002" +
    "\000\004\046\243\001\002\000\022\005\052\012\053\014" +
    "\064\023\043\026\045\044\056\045\063\046\050\001\002" +
    "\000\004\012\202\001\002\000\012\007\uffc7\012\151\014" +
    "\122\042\152\001\002\000\022\005\052\012\053\014\064" +
    "\023\043\026\045\044\056\045\063\046\050\001\002\000" +
    "\030\004\037\016\036\027\032\030\026\031\034\033\031" +
    "\035\030\037\042\040\033\043\040\046\035\001\002\000" +
    "\006\004\uffda\037\uffda\001\002\000\056\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\012\uffe8\014\uffe8\016\uffe8\023\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\001\002\000\056\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\012\uffe7\014\uffe7\016\uffe7\023\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\035\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\001\002\000" +
    "\020\005\052\012\143\014\064\023\144\044\056\045\063" +
    "\046\050\001\002\000\044\002\uffb3\004\uffb3\006\uffb3\010" +
    "\uffb3\011\uffb3\013\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\023\uffb3\024\113\036\uffb3\037\uffb3\041\uffb3\042\uffb3\046" +
    "\uffb3\001\002\000\020\005\052\012\053\014\064\023\043" +
    "\044\056\045\063\046\050\001\002\000\046\002\uffae\004" +
    "\uffae\006\uffae\010\uffae\011\uffae\013\uffae\015\uffae\017\uffae" +
    "\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae\036\uffae\037" +
    "\uffae\041\uffae\042\uffae\046\uffae\001\002\000\046\002\uffaf" +
    "\004\uffaf\006\uffaf\010\uffaf\011\uffaf\013\uffaf\015\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\023\uffaf\024\uffaf\025\uffaf\036\uffaf" +
    "\037\uffaf\041\uffaf\042\uffaf\046\uffaf\001\002\000\052\002" +
    "\uffc7\004\uffc7\006\uffc7\010\uffc7\011\uffc7\012\121\013\uffc7" +
    "\014\122\015\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\046\uffc7" +
    "\001\002\000\032\002\uffc0\004\uffc0\006\uffc0\011\uffc0\013" +
    "\uffc0\015\uffc0\017\uffc0\036\uffc0\037\uffc0\041\uffc0\042\uffc0" +
    "\046\uffc0\001\002\000\046\002\uffa6\004\uffa6\006\uffa6\010" +
    "\uffa6\011\uffa6\013\uffa6\015\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\036\uffa6\037\uffa6\041\uffa6\042" +
    "\uffa6\046\uffa6\001\002\000\022\005\052\012\053\014\064" +
    "\023\043\026\045\044\056\045\063\046\050\001\002\000" +
    "\046\002\uffb1\004\uffb1\006\uffb1\010\uffb1\011\uffb1\013\uffb1" +
    "\015\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025" +
    "\115\036\uffb1\037\uffb1\041\uffb1\042\uffb1\046\uffb1\001\002" +
    "\000\042\002\uffb5\004\uffb5\006\uffb5\010\uffb5\011\uffb5\013" +
    "\uffb5\015\uffb5\017\uffb5\020\uffb5\021\uffb5\023\111\036\uffb5" +
    "\037\uffb5\041\uffb5\042\uffb5\046\uffb5\001\002\000\046\002" +
    "\uffa5\004\uffa5\006\uffa5\010\uffa5\011\uffa5\013\uffa5\015\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5\036" +
    "\uffa5\037\uffa5\041\uffa5\042\uffa5\046\uffa5\001\002\000\034" +
    "\002\uffbd\004\uffbd\006\uffbd\011\uffbd\013\uffbd\015\uffbd\017" +
    "\uffbd\021\106\036\uffbd\037\uffbd\041\uffbd\042\uffbd\046\uffbd" +
    "\001\002\000\040\002\uffb6\004\uffb6\006\uffb6\010\103\011" +
    "\uffb6\013\uffb6\015\uffb6\017\uffb6\020\uffb6\021\uffb6\036\uffb6" +
    "\037\uffb6\041\uffb6\042\uffb6\046\uffb6\001\002\000\046\002" +
    "\uffa8\004\uffa8\006\uffa8\010\uffa8\011\uffa8\013\uffa8\015\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\023\uffa8\024\uffa8\025\uffa8\036" +
    "\uffa8\037\uffa8\041\uffa8\042\uffa8\046\uffa8\001\002\000\004" +
    "\017\102\001\002\000\046\002\uffa7\004\uffa7\006\uffa7\010" +
    "\uffa7\011\uffa7\013\uffa7\015\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\036\uffa7\037\uffa7\041\uffa7\042" +
    "\uffa7\046\uffa7\001\002\000\022\005\052\012\053\014\064" +
    "\023\043\026\045\044\056\045\063\046\050\001\002\000" +
    "\036\002\uffba\004\uffba\006\uffba\011\uffba\013\uffba\015\uffba" +
    "\017\uffba\020\070\021\uffba\036\uffba\037\uffba\041\uffba\042" +
    "\uffba\046\uffba\001\002\000\036\002\uffb8\004\uffb8\006\uffb8" +
    "\011\uffb8\013\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\036" +
    "\uffb8\037\uffb8\041\uffb8\042\uffb8\046\uffb8\001\002\000\034" +
    "\002\uffbc\004\uffbc\006\uffbc\011\uffbc\013\uffbc\015\uffbc\017" +
    "\uffbc\021\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\046\uffbc" +
    "\001\002\000\022\005\052\012\053\014\064\023\043\026" +
    "\045\044\056\045\063\046\050\001\002\000\036\002\uffba" +
    "\004\uffba\006\uffba\011\uffba\013\uffba\015\uffba\017\uffba\020" +
    "\070\021\uffba\036\uffba\037\uffba\041\uffba\042\uffba\046\uffba" +
    "\001\002\000\034\002\uffbb\004\uffbb\006\uffbb\011\uffbb\013" +
    "\uffbb\015\uffbb\017\uffbb\021\uffbb\036\uffbb\037\uffbb\041\uffbb" +
    "\042\uffbb\046\uffbb\001\002\000\004\015\101\001\002\000" +
    "\006\011\075\015\uffc1\001\002\000\022\005\052\012\053" +
    "\014\064\023\043\026\045\044\056\045\063\046\050\001" +
    "\002\000\004\015\uffc3\001\002\000\006\011\075\015\uffc1" +
    "\001\002\000\004\015\uffc2\001\002\000\046\002\uffc4\004" +
    "\uffc4\006\uffc4\010\uffc4\011\uffc4\013\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\036\uffc4\037" +
    "\uffc4\041\uffc4\042\uffc4\046\uffc4\001\002\000\006\004\uffd9" +
    "\037\uffd9\001\002\000\020\005\052\012\053\014\064\023" +
    "\043\044\056\045\063\046\050\001\002\000\036\002\uffb7" +
    "\004\uffb7\006\uffb7\011\uffb7\013\uffb7\015\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\046\uffb7" +
    "\001\002\000\032\002\uffbf\004\uffbf\006\uffbf\011\uffbf\013" +
    "\uffbf\015\uffbf\017\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf" +
    "\046\uffbf\001\002\000\022\005\052\012\053\014\064\023" +
    "\043\026\045\044\056\045\063\046\050\001\002\000\034" +
    "\002\uffbd\004\uffbd\006\uffbd\011\uffbd\013\uffbd\015\uffbd\017" +
    "\uffbd\021\106\036\uffbd\037\uffbd\041\uffbd\042\uffbd\046\uffbd" +
    "\001\002\000\032\002\uffbe\004\uffbe\006\uffbe\011\uffbe\013" +
    "\uffbe\015\uffbe\017\uffbe\036\uffbe\037\uffbe\041\uffbe\042\uffbe" +
    "\046\uffbe\001\002\000\020\005\052\012\053\014\064\023" +
    "\043\044\056\045\063\046\050\001\002\000\044\002\uffb4" +
    "\004\uffb4\006\uffb4\010\uffb4\011\uffb4\013\uffb4\015\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\023\uffb4\024\113\036\uffb4\037\uffb4" +
    "\041\uffb4\042\uffb4\046\uffb4\001\002\000\020\005\052\012" +
    "\053\014\064\023\043\044\056\045\063\046\050\001\002" +
    "\000\046\002\uffb2\004\uffb2\006\uffb2\010\uffb2\011\uffb2\013" +
    "\uffb2\015\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2" +
    "\025\115\036\uffb2\037\uffb2\041\uffb2\042\uffb2\046\uffb2\001" +
    "\002\000\020\005\052\012\053\014\064\023\043\044\056" +
    "\045\063\046\050\001\002\000\046\002\uffb0\004\uffb0\006" +
    "\uffb0\010\uffb0\011\uffb0\013\uffb0\015\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\023\uffb0\024\uffb0\025\uffb0\036\uffb0\037\uffb0\041" +
    "\uffb0\042\uffb0\046\uffb0\001\002\000\004\013\120\001\002" +
    "\000\046\002\uffad\004\uffad\006\uffad\010\uffad\011\uffad\013" +
    "\uffad\015\uffad\017\uffad\020\uffad\021\uffad\023\uffad\024\uffad" +
    "\025\uffad\036\uffad\037\uffad\041\uffad\042\uffad\046\uffad\001" +
    "\002\000\024\005\052\012\053\013\uffcb\014\064\023\043" +
    "\026\045\044\056\045\063\046\050\001\002\000\022\005" +
    "\052\012\053\014\064\023\043\026\045\044\056\045\063" +
    "\046\050\001\002\000\046\002\uffa4\004\uffa4\006\uffa4\010" +
    "\uffa4\011\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\036\uffa4\037\uffa4\041\uffa4\042" +
    "\uffa4\046\uffa4\001\002\000\006\011\125\015\126\001\002" +
    "\000\022\005\052\012\053\014\064\023\043\026\045\044" +
    "\056\045\063\046\050\001\002\000\050\002\uffc6\004\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6\015\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\036\uffc6" +
    "\037\uffc6\041\uffc6\042\uffc6\046\uffc6\001\002\000\050\002" +
    "\uffc8\004\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\036\uffc8\037\uffc8\041\uffc8\042\uffc8\046\uffc8\001\002" +
    "\000\004\015\131\001\002\000\050\002\uffc5\004\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\015\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\036\uffc5\037" +
    "\uffc5\041\uffc5\042\uffc5\046\uffc5\001\002\000\004\013\uffcc" +
    "\001\002\000\004\013\137\001\002\000\006\011\135\013" +
    "\uffc9\001\002\000\022\005\052\012\053\014\064\023\043" +
    "\026\045\044\056\045\063\046\050\001\002\000\004\013" +
    "\uffca\001\002\000\046\002\uffa3\004\uffa3\006\uffa3\010\uffa3" +
    "\011\uffa3\013\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\036\uffa3\037\uffa3\041\uffa3\042\uffa3" +
    "\046\uffa3\001\002\000\036\002\uffb9\004\uffb9\006\uffb9\011" +
    "\uffb9\013\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\036\uffb9" +
    "\037\uffb9\041\uffb9\042\uffb9\046\uffb9\001\002\000\046\002" +
    "\uffac\004\uffac\006\uffac\010\uffac\011\uffac\013\uffac\015\uffac" +
    "\017\uffac\020\uffac\021\uffac\023\uffac\024\uffac\025\uffac\036" +
    "\uffac\037\uffac\041\uffac\042\uffac\046\uffac\001\002\000\046" +
    "\002\uffaa\004\uffaa\006\uffaa\010\uffaa\011\uffaa\013\uffaa\015" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\036\uffaa\037\uffaa\041\uffaa\042\uffaa\046\uffaa\001\002\000" +
    "\022\005\052\012\053\014\064\023\043\026\045\044\056" +
    "\045\063\046\050\001\002\000\020\005\052\012\143\014" +
    "\064\023\144\044\056\045\063\046\050\001\002\000\046" +
    "\002\uffab\004\uffab\006\uffab\010\uffab\011\uffab\013\uffab\015" +
    "\uffab\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab\025\uffab" +
    "\036\uffab\037\uffab\041\uffab\042\uffab\046\uffab\001\002\000" +
    "\004\013\147\001\002\000\046\002\uffa9\004\uffa9\006\uffa9" +
    "\010\uffa9\011\uffa9\013\uffa9\015\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\036\uffa9\037\uffa9\041\uffa9" +
    "\042\uffa9\046\uffa9\001\002\000\006\004\uffd8\037\uffd8\001" +
    "\002\000\024\005\052\012\053\013\uffcb\014\064\023\043" +
    "\026\045\044\056\045\063\046\050\001\002\000\006\014" +
    "\160\022\161\001\002\000\004\007\154\001\002\000\022" +
    "\005\052\012\053\014\064\023\043\026\045\044\056\045" +
    "\063\046\050\001\002\000\006\004\uffd2\037\uffd2\001\002" +
    "\000\006\004\uffd3\037\uffd3\001\002\000\010\004\uffd0\007" +
    "\176\037\uffd0\001\002\000\006\014\162\022\163\001\002" +
    "\000\024\002\ufff7\004\ufff7\006\ufff7\007\ufff7\011\ufff7\013" +
    "\ufff7\036\ufff7\037\ufff7\046\ufff7\001\002\000\004\022\173" +
    "\001\002\000\006\011\164\015\165\001\002\000\022\005" +
    "\052\012\053\014\064\023\043\026\045\044\056\045\063" +
    "\046\050\001\002\000\024\002\ufff6\004\ufff6\006\ufff6\007" +
    "\ufff6\011\ufff6\013\ufff6\036\ufff6\037\ufff6\046\ufff6\001\002" +
    "\000\006\011\167\015\170\001\002\000\022\005\052\012" +
    "\053\014\064\023\043\026\045\044\056\045\063\046\050" +
    "\001\002\000\006\004\uffce\037\uffce\001\002\000\004\015" +
    "\172\001\002\000\006\004\uffcd\037\uffcd\001\002\000\004" +
    "\015\174\001\002\000\004\015\175\001\002\000\024\002" +
    "\ufff5\004\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\036\ufff5" +
    "\037\ufff5\046\ufff5\001\002\000\022\005\052\012\053\014" +
    "\064\023\043\026\045\044\056\045\063\046\050\001\002" +
    "\000\006\004\uffcf\037\uffcf\001\002\000\004\013\201\001" +
    "\002\000\006\004\uffd1\037\uffd1\001\002\000\022\005\052" +
    "\012\053\014\064\023\043\026\045\044\056\045\063\046" +
    "\050\001\002\000\004\013\204\001\002\000\006\036\uffe1" +
    "\042\206\001\002\000\004\036\210\001\002\000\004\033" +
    "\207\001\002\000\004\036\uffe2\001\002\000\026\004\037" +
    "\016\036\027\032\030\026\031\034\033\031\035\030\040" +
    "\033\043\040\046\035\001\002\000\032\004\uffde\016\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\213\033\uffde\035\uffde\037" +
    "\uffde\040\uffde\043\uffde\046\uffde\001\002\000\030\004\uffe3" +
    "\016\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\035\uffe3\037" +
    "\uffe3\040\uffe3\043\uffe3\046\uffe3\001\002\000\006\031\215" +
    "\036\214\001\002\000\026\004\037\016\036\027\032\030" +
    "\026\031\034\033\031\035\030\040\033\043\040\046\035" +
    "\001\002\000\004\012\216\001\002\000\022\005\052\012" +
    "\053\014\064\023\043\026\045\044\056\045\063\046\050" +
    "\001\002\000\004\013\220\001\002\000\004\036\221\001" +
    "\002\000\026\004\037\016\036\027\032\030\026\031\034" +
    "\033\031\035\030\040\033\043\040\046\035\001\002\000" +
    "\032\004\uffde\016\uffde\027\uffde\030\uffde\031\uffde\032\213" +
    "\033\uffde\035\uffde\037\uffde\040\uffde\043\uffde\046\uffde\001" +
    "\002\000\030\004\uffe0\016\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\033\uffe0\035\uffe0\037\uffe0\040\uffe0\043\uffe0\046\uffe0\001" +
    "\002\000\030\004\uffdf\016\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\033\uffdf\035\uffdf\037\uffdf\040\uffdf\043\uffdf\046\uffdf\001" +
    "\002\000\004\036\226\001\002\000\024\005\052\012\053" +
    "\014\064\023\043\026\045\041\227\044\056\045\063\046" +
    "\050\001\002\000\004\042\240\001\002\000\004\041\233" +
    "\001\002\000\004\037\232\001\002\000\030\004\uffe4\016" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\035\uffe4\037\uffe4" +
    "\040\uffe4\043\uffe4\046\uffe4\001\002\000\004\042\234\001" +
    "\002\000\004\036\235\001\002\000\026\004\037\016\036" +
    "\027\032\030\026\031\034\033\031\035\030\040\033\043" +
    "\040\046\035\001\002\000\026\005\052\012\053\014\064" +
    "\023\043\026\045\037\uffdc\041\227\044\056\045\063\046" +
    "\050\001\002\000\004\037\uffdd\001\002\000\004\036\241" +
    "\001\002\000\026\004\037\016\036\027\032\030\026\031" +
    "\034\033\031\035\030\040\033\043\040\046\035\001\002" +
    "\000\004\037\uffdb\001\002\000\012\004\uffc7\014\122\037" +
    "\uffc7\042\244\001\002\000\004\022\246\001\002\000\006" +
    "\004\uffd5\037\uffd5\001\002\000\006\004\uffd4\037\uffd4\001" +
    "\002\000\004\034\250\001\002\000\022\005\052\012\053" +
    "\014\064\023\043\026\045\044\056\045\063\046\050\001" +
    "\002\000\004\042\252\001\002\000\022\005\052\012\053" +
    "\014\064\023\043\026\045\044\056\045\063\046\050\001" +
    "\002\000\004\042\254\001\002\000\022\005\052\012\053" +
    "\014\064\023\043\026\045\044\056\045\063\046\050\001" +
    "\002\000\004\036\256\001\002\000\026\004\037\016\036" +
    "\027\032\030\026\031\034\033\031\035\030\040\033\043" +
    "\040\046\035\001\002\000\030\004\uffe5\016\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\033\uffe5\035\uffe5\037\uffe5\040\uffe5\043" +
    "\uffe5\046\uffe5\001\002\000\056\002\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\012\uffeb\014\uffeb\016\uffeb\023\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\001" +
    "\002\000\056\002\uffea\004\uffea\005\uffea\006\uffea\012\uffea" +
    "\014\uffea\016\uffea\023\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\035\uffea\037\uffea\040\uffea\041\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\001\002\000\006\004" +
    "\uffd6\037\uffd6\001\002\000\030\004\uffe6\016\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\033\uffe6\035\uffe6\037\uffe6\040\uffe6\043" +
    "\uffe6\046\uffe6\001\002\000\056\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\012\uffe9\014\uffe9\016\uffe9\023\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\001" +
    "\002\000\004\036\ufff1\001\002\000\006\014\162\022\267" +
    "\001\002\000\004\015\165\001\002\000\006\013\uffed\046" +
    "\015\001\002\000\004\013\uffef\001\002\000\006\014\266" +
    "\022\161\001\002\000\006\011\uffec\013\uffec\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufffe\001\002\000\006\014\302\022\161\001\002\000" +
    "\012\002\ufffb\004\ufffb\006\ufffb\046\ufffb\001\002\000\014" +
    "\002\ufff3\004\ufff3\006\ufff3\007\313\046\ufff3\001\002\000" +
    "\006\014\162\022\303\001\002\000\006\011\304\015\165" +
    "\001\002\000\022\005\052\012\053\014\064\023\043\026" +
    "\045\044\056\045\063\046\050\001\002\000\006\011\306" +
    "\015\307\001\002\000\022\005\052\012\053\014\064\023" +
    "\043\026\045\044\056\045\063\046\050\001\002\000\012" +
    "\002\ufff9\004\ufff9\006\ufff9\046\ufff9\001\002\000\004\015" +
    "\311\001\002\000\012\002\ufff8\004\ufff8\006\ufff8\046\ufff8" +
    "\001\002\000\012\002\ufffa\004\ufffa\006\ufffa\046\ufffa\001" +
    "\002\000\022\005\052\012\053\014\064\023\043\026\045" +
    "\044\056\045\063\046\050\001\002\000\012\002\ufff4\004" +
    "\ufff4\006\ufff4\046\ufff4\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\012\002\007\003\006\044\005\050\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\275" +
    "\003\006\044\005\001\001\000\010\002\274\003\006\044" +
    "\005\001\001\000\002\001\001\000\010\002\273\003\006" +
    "\044\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\016\005\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\021\001\001\000" +
    "\004\006\264\001\001\000\002\001\001\000\010\010\023" +
    "\011\026\012\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\016\057\017\054\020\050\022\043\023\056" +
    "\025\053\026\064\027\046\031\060\040\261\041\065\043" +
    "\045\001\001\000\010\010\257\011\026\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\016\057\017\054\020\050\022\043\023\056\025\053" +
    "\026\064\027\046\031\060\040\224\041\065\043\045\001" +
    "\001\000\002\001\001\000\006\036\152\047\147\001\001" +
    "\000\032\016\057\017\054\020\050\022\043\023\056\025" +
    "\053\026\064\027\046\031\060\040\061\041\065\043\045" +
    "\001\001\000\010\010\040\011\026\012\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\140\031\060\043\141\001\001\000\002\001\001\000" +
    "\022\016\057\017\054\022\043\025\053\027\046\031\060" +
    "\041\137\043\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\057\017\054\020\050\022\043\023" +
    "\056\025\053\026\064\027\046\031\060\040\116\041\065" +
    "\043\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\016\057\017\054\020\050\022\043\023\056\025\053" +
    "\026\064\027\046\031\060\035\072\040\073\041\065\043" +
    "\045\001\001\000\004\024\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\057\017\054\022\043\025" +
    "\053\026\070\027\046\031\060\041\065\043\045\001\001" +
    "\000\004\024\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\075\001\001\000\032\016\057\017\054" +
    "\020\050\022\043\023\056\025\053\026\064\027\046\031" +
    "\060\040\076\041\065\043\045\001\001\000\002\001\001" +
    "\000\004\034\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\103\017\054\022\043" +
    "\025\053\027\046\031\060\043\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\016\057\017\054\022\043" +
    "\023\106\025\053\026\064\027\046\031\060\041\065\043" +
    "\045\001\001\000\004\021\107\001\001\000\002\001\001" +
    "\000\014\022\111\025\053\027\046\031\060\043\045\001" +
    "\001\000\002\001\001\000\012\025\113\027\046\031\060" +
    "\043\045\001\001\000\002\001\001\000\010\027\115\031" +
    "\060\043\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\016\057\017\054\020\050\022" +
    "\043\023\056\025\053\026\064\027\046\031\060\032\132" +
    "\033\131\040\133\041\065\043\045\001\001\000\032\016" +
    "\057\017\054\020\050\022\043\023\056\025\053\026\064" +
    "\027\046\031\060\040\123\041\065\043\045\001\001\000" +
    "\002\001\001\000\004\037\126\001\001\000\032\016\057" +
    "\017\054\020\050\022\043\023\056\025\053\026\064\027" +
    "\046\031\060\040\127\041\065\043\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\016\057\017\054\020\050\022\043\023\056\025" +
    "\053\026\064\027\046\031\060\033\135\040\133\041\065" +
    "\043\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\016\057\017\054\020\050\022\043\023\056\025\053\026" +
    "\064\027\046\031\060\040\145\041\065\043\045\001\001" +
    "\000\010\030\144\031\060\043\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\016\057\017\054\020\050\022\043\023\056\025" +
    "\053\026\064\027\046\031\060\032\177\033\131\040\133" +
    "\041\065\043\045\001\001\000\006\006\156\014\155\001" +
    "\001\000\002\001\001\000\032\016\057\017\054\020\050" +
    "\022\043\023\056\025\053\026\064\027\046\031\060\040" +
    "\154\041\065\043\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\016\057" +
    "\017\054\020\050\022\043\023\056\025\053\026\064\027" +
    "\046\031\060\040\165\041\065\043\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\057\017\054\020" +
    "\050\022\043\023\056\025\053\026\064\027\046\031\060" +
    "\040\170\041\065\043\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\057\017\054\020" +
    "\050\022\043\023\056\025\053\026\064\027\046\031\060" +
    "\040\176\041\065\043\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\016\057\017\054" +
    "\020\050\022\043\023\056\025\053\026\064\027\046\031" +
    "\060\040\202\041\065\043\045\001\001\000\002\001\001" +
    "\000\004\015\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\210\011\026\012\024" +
    "\001\001\000\004\046\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\223\011\026\012\024\001\001" +
    "\000\002\001\001\000\032\016\057\017\054\020\050\022" +
    "\043\023\056\025\053\026\064\027\046\031\060\040\216" +
    "\041\065\043\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\221\011\026\012\024\001\001\000\004" +
    "\046\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\013\230\016\057\017\054\020\050" +
    "\022\043\023\056\025\053\026\064\027\046\031\060\040" +
    "\227\041\065\043\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\235\011\026\012\024" +
    "\001\001\000\034\013\236\016\057\017\054\020\050\022" +
    "\043\023\056\025\053\026\064\027\046\031\060\040\227" +
    "\041\065\043\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\241\011\026\012\024\001\001\000\002" +
    "\001\001\000\004\036\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\016\057\017\054\020\050\022\043\023\056\025\053\026" +
    "\064\027\046\031\060\040\250\041\065\043\045\001\001" +
    "\000\002\001\001\000\032\016\057\017\054\020\050\022" +
    "\043\023\056\025\053\026\064\027\046\031\060\040\252" +
    "\041\065\043\045\001\001\000\002\001\001\000\032\016" +
    "\057\017\054\020\050\022\043\023\056\025\053\026\064" +
    "\027\046\031\060\040\254\041\065\043\045\001\001\000" +
    "\002\001\001\000\010\010\256\011\026\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\270\005\015\001\001\000\002\001\001\000\004\006\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\300\042\277\001\001" +
    "\000\002\001\001\000\004\045\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\057\017\054\020\050" +
    "\022\043\023\056\025\053\026\064\027\046\031\060\040" +
    "\304\041\065\043\045\001\001\000\002\001\001\000\032" +
    "\016\057\017\054\020\050\022\043\023\056\025\053\026" +
    "\064\027\046\031\060\040\307\041\065\043\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\057\017\054\020\050\022\043" +
    "\023\056\025\053\026\064\027\046\031\060\040\313\041" +
    "\065\043\045\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;
    public Node root;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Val ::= ID LEFT_PARENTHESIS SendParams RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node val= new Node("Val");
            val.AddNode(new Node("ID",(String)id));
            val.AddNode(new Node("LEFT_PARENTHESIS","("));
            val.AddNode(sp);
            val.AddNode(new Node("RIGHT_PARENTHESIS",")"));
            RESULT = val;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Val",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Val ::= ID ArrayOpt 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node val= new Node("Val");
            val.AddNode(new Node("ID",(String)id));
            RESULT = val;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Val",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Val ::= BOOL_VAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node val= new Node("Val");
            val.AddNode(new Node("BOOL_VAL",(String)b));
            RESULT = val;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Val",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Val ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node val= new Node("Val");
            val.AddNode(new Node("NUM",(String)n));
            RESULT = val;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Val",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Val ::= CHR_VAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node val= new Node("Val");
            val.AddNode(new Node("CHR_VAL",(String)c));
            RESULT = val;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Val",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Val ::= Array 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node val= new Node("Val");
            val.AddNode(a);
            RESULT = val;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Val",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // KA ::= LEFT_PARENTHESIS LogExp RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node ka= new Node("KA");
            ka.AddNode(new Node("LEFT_PARENTHESIS","("));
            ka.AddNode(le);
            ka.AddNode(new Node("RIGHT_PARENTHESIS",")"));
            RESULT = ka;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("KA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // KA ::= Val 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node ka= new Node("KA");
            ka.AddNode(v);
            RESULT = ka;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("KA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // KA ::= ADD_OP KA 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ka2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ka2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ka2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node ka= new Node("KA");
            ka.AddNode(new Node("ADD_OP",(String)ao));
            ka.AddNode(ka2);
            RESULT = ka;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("KA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // K ::= ADD_OP KA 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int kaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int karight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ka = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node k= new Node("K");
            k.AddNode(new Node("ADD_OP",(String)ao));
            k.AddNode(ka);
            RESULT = k;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("K",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // K ::= LEFT_PARENTHESIS LogExp RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node k= new Node("K");
            k.AddNode(new Node("LEFT_PARENTHESIS","("));
            k.AddNode(le);
            k.AddNode(new Node("RIGHT_PARENTHESIS",")"));
            RESULT = k;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("K",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // K ::= Val 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node k= new Node("K");
            k.AddNode(v);
            RESULT = k;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("K",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // F ::= K 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node f= new Node("F");
            f.AddNode(k);
            RESULT = f;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // F ::= F EXP_OP K 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node f= new Node("F");
            f.AddNode(f1);
            f.AddNode(new Node("EXP_OP", "(String)eo"));
            f.AddNode(k);
            RESULT = f;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node t= new Node("T");
            t.AddNode(f);
            RESULT = t;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // T ::= T MULT_OP F 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int moleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node t= new Node("T");
            t.AddNode(t1);
            t.AddNode(new Node("MULT_OP", "(String)mo"));
            t.AddNode(f);
            RESULT = t;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node e= new Node("E");
            e.AddNode(t);
            RESULT = e;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E ADD_OP T 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node e= new Node("E");
            e.AddNode(e1);
            e.AddNode(new Node("ADD_OP", "(String)ao"));
            e.AddNode(t);
            RESULT = e;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MathExp ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node math= new Node("MathExp");
            math.AddNode(e);
            RESULT = math;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MathExp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RelExp ::= MathExp 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node re= new Node("RelExp");
            re.AddNode(me);
            RESULT = re;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelExp",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RelExp ::= MathExp REL_OP MathExp 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ro = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int me2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int me2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object me2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node re= new Node("RelExp");
            re.AddNode(me);
            re.AddNode(new Node("REL_OP",(String)ro));
            re.AddNode(me2);
            RESULT = re;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelExp",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // F2 ::= RelExp 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node f2= new Node("F2");
            f2.AddNode(re);
            RESULT = f2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F2",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // F2 ::= NOT RelExp 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node f2= new Node("F2");
            f2.AddNode(new Node("NOT","not"));
            f2.AddNode(re);
            RESULT = f2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F2",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // T2P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T2P",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T2P ::= AND F2 T2P 
            {
              Object RESULT =null;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int t2p2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int t2p2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t2p2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node t2p= new Node("T2P");
            t2p.AddNode(f2);
            t2p.AddNode(t2p2);
            RESULT = t2p;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T2P",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T2 ::= F2 T2P 
            {
              Object RESULT =null;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int t2pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int t2pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t2p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node t2= new Node("T2");
            t2.AddNode(f2);
            t2.AddNode(t2p);
            RESULT = t2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T2",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E2P",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2P ::= OR T2 E2P 
            {
              Object RESULT =null;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2p2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2p2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2p2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node e2p= new Node("E2P");
            e2p.AddNode(new Node("OR","or"));
            e2p.AddNode(t2);
            e2p.AddNode(e2p2);
            RESULT = e2p;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E2P",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E2 ::= T2 E2P 
            {
              Object RESULT =null;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node e2= new Node("E2");
            e2.AddNode(t2);
            e2.AddNode(e2p);
            RESULT = e2p;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LogExp ::= E2 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node log= new Node("LogExp");
            log.AddNode(e2);
            RESULT = log;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogExp",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ArrayListP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArrayListP",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ArrayListP ::= COMMA LogExp ArrayListP 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int alpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int alpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object alp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node arrlistp= new Node("ArrayListP");
            arrlistp.AddNode(new Node("COMMA",","));
            arrlistp.AddNode(le);
            arrlistp.AddNode(alp);
            RESULT = arrlistp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArrayListP",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ArrayList ::= LogExp ArrayListP 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int alpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int alpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object alp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node arrlist= new Node("ArrayList");
            arrlist.AddNode(le);
            arrlist.AddNode(alp);
            RESULT = arrlist;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArrayList",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Array ::= LEFT_BRACKET ArrayList RIGHT_BRACKET 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node arr= new Node("Array");
            arr.AddNode(new Node("LEFT_BRACKET","["));
            arr.AddNode(al);
            arr.AddNode(new Node("RIGHT_BRACKET","]"));
            RESULT = arr;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Array",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ArrayOpt2 ::= COMMA LogExp RIGHT_BRACKET 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node arrop2= new Node("ArrayOpt2");
            arrop2.AddNode(new Node("COMMA",","));
            arrop2.AddNode(le);
            arrop2.AddNode(new Node("RIGHT_BRACKET","]"));
            RESULT = arrop2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArrayOpt2",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ArrayOpt2 ::= RIGHT_BRACKET 
            {
              Object RESULT =null;
		
            Node arrop2= new Node("ArrayOpt2");
            arrop2.AddNode(new Node("RIGHT_BRACKET","]"));
            RESULT = arrop2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArrayOpt2",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ArrayOpt ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArrayOpt",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ArrayOpt ::= LEFT_BRACKET LogExp ArrayOpt2 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ao2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ao2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ao2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node arrop= new Node("ArrayOpt");
            arrop.AddNode(new Node("LEFT_BRACKET","["));
            arrop.AddNode(le);
            arrop.AddNode(ao2);
            RESULT = arrop;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArrayOpt",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SendParams2 ::= LogExp 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node sendpar2= new Node("SendParams2");
            sendpar2.AddNode(le);
            RESULT = sendpar2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SendParams2",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SendParams2 ::= LogExp COMMA SendParams2 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node sendpar2= new Node("SendParams2");
            sendpar2.AddNode(le);
            sendpar2.AddNode(new Node("COMMA",","));
            sendpar2.AddNode(sp2);
            RESULT = sendpar2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SendParams2",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SendParams ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SendParams",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SendParams ::= SendParams2 
            {
              Object RESULT =null;
		int sp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node sendpar= new Node("SendParams");
            sendpar.AddNode(sp2);
            RESULT = sendpar;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SendParams",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Declaration ::= LEFT_BRACKET TYPE COMMA LogExp COMMA LogExp RIGHT_BRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int le2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int le2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node decl= new Node("Declaration");
            decl.AddNode(new Node("LEFT_BRACKET", "["));
            decl.AddNode(new Node("TYPE", (String)t));
            decl.AddNode(new Node("COMMA", ","));
            decl.AddNode(le);
            decl.AddNode(new Node("COMMA", ","));
            decl.AddNode(le2);
            decl.AddNode(new Node("RIGHT_BRACKET", "]"));
            RESULT = decl;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaration",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Declaration ::= LEFT_BRACKET TYPE COMMA LogExp RIGHT_BRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node decl= new Node("Declaration");
            decl.AddNode(new Node("LEFT_BRACKET", "["));
            decl.AddNode(new Node("TYPE", (String)t));
            decl.AddNode(new Node("COMMA", ","));
            decl.AddNode(le);
            decl.AddNode(new Node("RIGHT_BRACKET", "]"));
            RESULT = decl;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaration",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Declaration ::= TypeDecl ASSIGN LogExp 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node decl= new Node("Declaration");
            decl.AddNode(td);
            decl.AddNode(new Node("ASSIGN","<="));
            decl.AddNode(le);
            RESULT = decl;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaration",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Declaration ::= TypeDecl 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node decl= new Node("Declaration");
            decl.AddNode(td);
            RESULT = decl;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaration",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VarActions ::= LEFT_PARENTHESIS SendParams RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node vara= new Node("VarActions");
            vara.AddNode(new Node("LEFT_PARENTHESIS","("));
            vara.AddNode(sp);
            vara.AddNode(new Node("RIGHT_PARENTHESIS",")"));
            RESULT = vara;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VarActions",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VarActions ::= ArrayOpt ASSIGN LogExp 
            {
              Object RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node vara= new Node("VarActions");
            vara.AddNode(ao);
            vara.AddNode(new Node("ASSIGN","<="));
            vara.AddNode(le);
            RESULT = vara;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VarActions",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VarActions ::= COLON Declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node vara= new Node("VarActions");
            vara.AddNode(new Node("COLON",":"));
            vara.AddNode(d);
            RESULT = vara;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VarActions",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InstLine ::= INPUT ID COLON TYPE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node instLine = new Node("InstLine");
            instLine.AddNode(new Node("INPUT","input"));
            instLine.AddNode(new Node("ID",(String)id));
            instLine.AddNode(new Node("COLON",":"));
            instLine.AddNode(new Node("TYPE",(String)t));
            RESULT = instLine;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLine",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InstLine ::= INPUT ID ArrayOpt 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node instLine = new Node("InstLine");
            instLine.AddNode(new Node("INPUT","input"));
            instLine.AddNode(new Node("ID",(String)id));
            instLine.AddNode(ao);
            RESULT = instLine;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLine",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InstLine ::= OUTPUT LogExp 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node instLine = new Node("InstLine");
            instLine.AddNode(new Node("OUTPUT","output"));
            instLine.AddNode(le);
            RESULT = instLine;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLine",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InstLine ::= NEXT 
            {
              Object RESULT =null;
		
            Node instLine = new Node("InstLine");
            instLine.AddNode(new Node("NEXT","next"));
            RESULT = instLine;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLine",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InstLine ::= ID VarActions 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node instLine = new Node("InstLine");
            instLine.AddNode(new Node("ID",(String)id));
            instLine.AddNode(va);
            RESULT = instLine;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLine",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InstLine ::= LEFT_BRACE LogExp RIGHT_BRACE 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node instLine = new Node("InstLine");
            instLine.AddNode(new Node("LEFT_BRACE","["));
            instLine.AddNode(le);
            instLine.AddNode(new Node("RIGHT_BRACE","]"));
            RESULT = instLine;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLine",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InstLine ::= END 
            {
              Object RESULT =null;
		
            Node instLine = new Node("InstLine");
            instLine.AddNode(new Node("END","end"));
            RESULT = instLine;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLine",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WhBlock ::= DO COLON INIT_CODE_BLOCK Block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node whb = new Node("WhBlock");
            whb.AddNode(new Node("DO","do"));
            whb.AddNode(new Node("COLON",":"));
            whb.AddNode(new Node("INIT_CODE_BLOCK","->"));
            whb.AddNode(b);
            RESULT = whb;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WhBlock",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WhBlock ::= LogExp DO COLON INIT_CODE_BLOCK Block 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node whb = new Node("WhBlock");
            whb.AddNode(le);
            whb.AddNode(new Node("DO","do"));
            whb.AddNode(new Node("COLON",":"));
            whb.AddNode(new Node("INIT_CODE_BLOCK","->"));
            whb.AddNode(b);
            RESULT = whb;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WhBlock",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WhBlock ::= LogExp DO COLON INIT_CODE_BLOCK Block WhBlock 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node whb = new Node("WhBlock");
            whb.AddNode(le);
            whb.AddNode(new Node("DO","do"));
            whb.AddNode(new Node("COLON",":"));
            whb.AddNode(new Node("INIT_CODE_BLOCK","->"));
            whb.AddNode(b);
            whb.AddNode(wh);
            RESULT = whb;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WhBlock",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Other ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Other",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Other ::= OTHERWISE INIT_CODE_BLOCK Block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node other = new Node("Other");
            other.AddNode(new Node("OTHERWISE","otherwise"));
            other.AddNode(new Node("INIT_CODE_BLOCK","->"));
            other.AddNode(b);
            RESULT = other;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Other",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Other ::= OTHERWISE IF LEFT_PARENTHESIS LogExp RIGHT_PARENTHESIS INIT_CODE_BLOCK Block Other 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node other = new Node("Other");
            other.AddNode(new Node("OTHERWISE","otherwise"));
            other.AddNode(new Node("IF","if"));
            other.AddNode(new Node("LEFT_PARENTHESIS","("));
            other.AddNode(le);
            other.AddNode(new Node("RIGHT_PARENTHESIS",")"));
            other.AddNode(new Node("INIT_CODE_BLOCK","->"));
            other.AddNode(b);
            other.AddNode(o);
            RESULT = other;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Other",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ciclo ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ciclo",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ciclo ::= COLON LOOP 
            {
              Object RESULT =null;
		
            Node ciclo= new Node("Ciclo");
            ciclo.AddNode(new Node("COLON",":"));
            ciclo.AddNode(new Node("LOOP","loop"));
            RESULT = ciclo;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Ciclo",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruction ::= IF LEFT_PARENTHESIS LogExp RIGHT_PARENTHESIS Ciclo INIT_CODE_BLOCK Block Other 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node instruction= new Node("Instruction");
            instruction.AddNode(new Node("IF","if"));
            instruction.AddNode(new Node("LEFT_PARENTHESIS","("));
            instruction.AddNode(le);
            instruction.AddNode(new Node("RIGHT_PARENTHESIS", ")"));
            instruction.AddNode(c);
            instruction.AddNode(new Node("INIT_CODE_BLOCK","->"));
            instruction.AddNode(b);
            instruction.AddNode(o);
            RESULT = instruction;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instruction",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruction ::= WHEN LogExp INIT_CODE_BLOCK WhBlock END_CODE_BLOCK 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int whbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int whbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object whb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node instruction= new Node("Instruction");
            instruction.AddNode(new Node("WHEN","when"));
            instruction.AddNode(le);
            instruction.AddNode(new Node("INIT_CODE_BLOCK","->"));
            instruction.AddNode(whb);
            instruction.AddNode(new Node("END_CODE_BLOCK","<."));
            RESULT = instruction;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instruction",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruction ::= LOOP ID IN LogExp COLON LogExp COLON LogExp INIT_CODE_BLOCK Block 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int le1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int le1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object le1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int le2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int le2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object le2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node instruction= new Node("Instruction");
            instruction.AddNode(new Node("LOOP","loop"));
            instruction.AddNode(new Node("ID",(String)id));
            instruction.AddNode(new Node("IN","in"));
            instruction.AddNode(le);
            instruction.AddNode(new Node("COLON",":"));
            instruction.AddNode(le1);
            instruction.AddNode(new Node("COLON",":"));
            instruction.AddNode(le2);
            instruction.AddNode(new Node("INIT_CODE_BLOCK","->"));
            instruction.AddNode(b);
            RESULT = instruction;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instruction",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruction ::= InstLine NEW_LINE 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node instruction= new Node("Instruction");
            instruction.AddNode(in);
            instruction.AddNode(new Node("NEW_LINE","\n"));
            RESULT = instruction;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instruction",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Block ::= NEW_LINE END_CODE_BLOCK 
            {
              Object RESULT =null;
		
            Node block= new Node("Block");
            block.AddNode(new Node("END_CODE_BLOCK","<."));
            RESULT = (Node)block;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Block ::= NEW_LINE Block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = (Node)b;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Block ::= InstLine END_CODE_BLOCK 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node block= new Node("Block");
            block.AddNode(in);
            block.AddNode(new Node("END_CODE_BLOCK","<."));
            RESULT = block;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Block ::= Instruction END_CODE_BLOCK 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node block= new Node("Block");
            block.AddNode(i);
            block.AddNode(new Node("END_CODE_BLOCK","<."));
            RESULT = block;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Block ::= Instruction Block 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node block= new Node("Block");
            block.AddNode(i);
            block.AddNode(b);
            RESULT = block;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // P ::= ID COLON TypeDecl 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node p= new Node("P");
            p.AddNode(new Node ("ID", (String)id));
            p.AddNode(new Node ("COLON", ":" ));
            RESULT = p;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Params ::= P 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node params= new Node("Params");
            params.AddNode(p);
            RESULT = params;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Params ::= P COMMA Params 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node params= new Node("Params");
            params.AddNode(p);
            params.AddNode(new Node("COMMA",","));
            params.AddNode(pa);
            RESULT = params;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RetType ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RetType",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RetType ::= COLON TypeDecl 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node returnt= new Node("RetType");
            returnt.AddNode(new Node("COLON",":"));
            returnt.AddNode(t);
            RESULT = returnt;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RetType",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Function ::= FUNCTION ID LEFT_PARENTHESIS Params RIGHT_PARENTHESIS RetType INIT_CODE_BLOCK Block 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node fun= new Node("Funcion");
            fun.AddNode(new Node("FUNCTION", "fun"));
            fun.AddNode(new Node("ID", (String)id ));
            fun.AddNode(new Node("LEFT_PARENTHESIS","("));
            fun.AddNode(p);
            fun.AddNode(new Node("RIGHT_PARENTHESIS", ")"));
            fun.AddNode(r);
            fun.AddNode(new Node("INIT_CODE_BLOCK", "->"));
            fun.AddNode(b);
            RESULT = fun;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GlobValAssign ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GlobValAssign",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobValAssign ::= ASSIGN LogExp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node globas= new Node("GlobValAssign");
            globas.AddNode(new Node("ASSIGN","<="));
            globas.AddNode(le);
            RESULT = globas;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GlobValAssign",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeDecl ::= LEFT_BRACKET LEFT_BRACKET TYPE RIGHT_BRACKET RIGHT_BRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
            Node typedec= new Node("TypeDecl");
            typedec.AddNode(new Node ("LEFT_BRACKET", "["));
            typedec.AddNode(new Node ("LEFT_BRACKET", "["));
            typedec.AddNode(new Node ("TYPE", (String)t));
            typedec.AddNode(new Node ("RIGHT_BRACKET", "]"));
            typedec.AddNode(new Node ("RIGHT_BRACKET", "]"));
            RESULT = typedec;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TypeDecl",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TypeDecl ::= LEFT_BRACKET TYPE RIGHT_BRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
            Node typedec= new Node("TypeDecl");
            typedec.AddNode(new Node ("LEFT_BRACKET", "["));
            typedec.AddNode(new Node ("TYPE", (String)t));
            typedec.AddNode(new Node ("RIGHT_BRACKET", "]"));
            RESULT = typedec;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TypeDecl",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TypeDecl ::= TYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node typedec= new Node("TypeDecl");
            typedec.AddNode(new Node ("TYPE", (String)t));
            RESULT = typedec;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TypeDecl",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // A ::= LEFT_BRACKET TYPE COMMA LogExp COMMA LogExp RIGHT_BRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int le2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int le2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node decl2= new Node("A");
            decl2.AddNode(new Node("LEFT_BRACKET", "["));
            decl2.AddNode(new Node("TYPE", (String)t));
            decl2.AddNode(new Node("COMMA", ","));
            decl2.AddNode(le);
            decl2.AddNode(new Node("COMMA", ","));
            decl2.AddNode(le2);
            decl2.AddNode(new Node("RIGHT_BRACKET", "]"));
            RESULT = decl2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // A ::= LEFT_BRACKET TYPE COMMA LogExp RIGHT_BRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Node decl2= new Node("A");
            decl2.AddNode(new Node("LEFT_BRACKET", "["));
            decl2.AddNode(new Node("TYPE", (String)t));
            decl2.AddNode(new Node("COMMA", ","));
            decl2.AddNode(le);
            decl2.AddNode(new Node("RIGHT_BRACKET", "]"));
            RESULT = decl2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A ::= TypeDecl GlobValAssign 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node decl2= new Node("A");
            decl2.AddNode(t);
            decl2.AddNode(g);
            RESULT = decl2;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalValDecl ::= ID COLON A 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node decl= new Node("GlobValDecl");
            decl.AddNode(new Node("ID",(String)id));
            decl.AddNode(new Node("COLON",(String)c));
            decl.AddNode(a);
            RESULT = decl;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GlobalValDecl",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= NEW_LINE Statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = (Node)s;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= GlobalValDecl Statement 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node global = new Node("Statement");
            global.AddNode(g);
            global.AddNode(s);
            RESULT = global;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= Function Statement 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node funcion = new Node("Statement");
            funcion.AddNode(f);
            funcion.AddNode(s);
            RESULT = funcion;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Begin ::= Statement 
            {
              Object RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                parser.root=(Node)init;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Begin",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

